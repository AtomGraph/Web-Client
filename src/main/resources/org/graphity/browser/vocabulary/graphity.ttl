@base <http://graphity.org/> .

@prefix : <ontology/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix gfb-app: <http://graph.facebook.com/schema/application#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .

: a owl:Ontology ;
    dc:title "Graphity ontology" ;
    rdfs:label "Graphity ontology" ;
    dct:modified "2012-02-09T20:54:00+01:00"^^xsd:dateTime ;
    vann:preferredNamespaceUri "http://graphity.org/ontology/" ;
    vann:preferredNamespacePrefix "g";
    foaf:homepage <http://graphity.org> ;
    dct:license <http://www.opendatacommons.org/licenses/pddl/1.0/> ;
    dc:creator <http://semantic-web.dk#martynas> .
<http://semantic-web.dk#martynas> a foaf:Person ;
    foaf:mbox <mailto:martynas@graphity.org> ;
    foaf:name "Martynas Juseviƒçius" ;
    foaf:nick "pumba_lt" ;
    foaf:based_near <http://dbpedia.org/resource/Copenhagen> .

:query a owl:ObjectProperty ;
    rdfs:label "has SPIN query" ;
    rdfs:isDefinedBy : ;
    rdfs:range sp:Query .

:service a owl:ObjectProperty ;
    rdfs:label "uses SPARQL service" ;
    rdfs:isDefinedBy : ;
    rdfs:range sd:Service .

:mode a owl:ObjectProperty ;
    rdfs:label "uses XSLT mode" ;
    rdfs:isDefinedBy : ;
    rdfs:range :XSLTMode .

:facebookApp a owl:ObjectProperty ;
    rdfs:label "has Facebook app" ;
    rdfs:isDefinedBy : ;
    rdfs:range gfb-app:type .
gfb-app:type rdfs:label "Facebook application" ;
    rdfs:isDefinedBy gfb-app: .
:apiKey a owl:DatatypeProperty ;
    rdfs:label "SPARQL endpoint authentication key" ;
    rdfs:domain sd:Service ;
    rdfs:range xsd:string .

# XSLT MODES

:XSLTMode a owl:Class ;
    rdfs:label "XSLT template mode" .

:ListMode a :XSLTMode ;
    dct:title "List" .
:EditMode a :XSLTMode ;
    dct:title "Edit" .
:TableMode a :XSLTMode ;
    dct:title "Table" .
:ImageMode a :XSLTMode ;
    dct:title "Gallery" .
:MapMode a :XSLTMode ;
    dct:title "Map" .
:DateTimeMode a :XSLTMode ;
    dct:title "Calendar" .

# QUERY COMPONENTS

:GraphVar  sp:varName "graph"^^xsd:string .
:SubjectVar  sp:varName "subject"^^xsd:string .
:PredicateVar  sp:varName "predicate"^^xsd:string .
:ObjectVar  sp:varName "object"^^xsd:string .

:UnionDefaultNamed a sp:Union ;
                  sp:elements (([ sp:object :ObjectVar ;
                                sp:predicate :PredicateVar ;
                                sp:subject :SubjectVar
                              ]) ([ a       sp:NamedGraph ;
                                sp:elements ([ sp:object :ObjectVar ;
                                            sp:predicate :PredicateVar ;
                                            sp:subject :SubjectVar
                                          ]) ;
                                sp:graphNameNode :GraphVar
                              ])) .

:SPOOptional a       sp:Optional ;
                  sp:elements ([ a       sp:Union ;
                              sp:elements (([ sp:object :ObjectVar ;
                                            sp:predicate :PredicateVar ;
                                            sp:subject :SubjectVar
                                          ]) ([ a       sp:NamedGraph ;
                                            sp:elements ([ sp:object :ObjectVar ;
                                                        sp:predicate :PredicateVar ;
                                                        sp:subject :SubjectVar
                                                      ]) ;
                                            sp:graphNameNode :GraphVar
                                          ]))
                            ]) .

# QUERIES

:SelectAll    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      #sp:limit "20"^^xsd:long ;
      sp:where (:UnionDefaultNamed) .

# =============================

:SelectLatest    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      #sp:limit "20"^^xsd:long ;
      sp:orderBy ([ a       sp:Desc ;
                  sp:expression
                          [ sp:varName "datetime"^^xsd:string
                          ]
                ]) ;
      sp:resultVariables (:SubjectVar [ sp:expression
                          [ a       xsd:dateTime ;
                            sp:arg1 :ObjectVar
                          ] ;
                  sp:varName "datetime"^^xsd:string
                ]) ;
      sp:where (:UnionDefaultNamed
		[ a       sp:Filter ;
                  sp:expression
                          [ a       sp:or ;
                            sp:arg1 [ a       sp:or ;
                                      sp:arg1 [ a       sp:or ;
                                                sp:arg1 [ a       sp:or ;
                                                          sp:arg1 [ a       sp:eq ;
                                                                    sp:arg1 :PredicateVar ;
                                                                    sp:arg2 dc:date
                                                                  ] ;
                                                          sp:arg2 [ a       sp:eq ;
                                                                    sp:arg1 :PredicateVar ;
                                                                    sp:arg2 dct:date
                                                                  ]
                                                        ] ;
                                                sp:arg2 [ a       sp:eq ;
                                                          sp:arg1 :PredicateVar ;
                                                          sp:arg2 dct:created
                                                        ]
                                              ] ;
                                      sp:arg2 [ a       sp:eq ;
                                                sp:arg1 :PredicateVar ;
                                                sp:arg2 dct:modified
                                              ]
                                    ] ;
                            sp:arg2 [ a       sp:eq ;
                                      sp:arg1 :PredicateVar ;
                                      sp:arg2 dct:issued
                                    ]
                          ]
		] [ a       sp:Filter ;
		sp:expression
			[ a       sp:or ;
			    sp:arg1 [ a       sp:eq ;
				    sp:arg1 [ a       sp:datatype ;
						sp:arg1 :ObjectVar
					    ] ;
				    sp:arg2 xsd:dateTime
				    ] ;
			    sp:arg2 [ a       sp:eq ;
				    sp:arg1 [ a       sp:datatype ;
						sp:arg1 :ObjectVar
					    ] ;
				    sp:arg2 xsd:date
				    ]
			]
		]) .

# =============================

:ConstructRegex    a       sp:Construct ;
      sp:templates ([ sp:object :ObjectVar ;
                  sp:predicate :PredicateVar ;
                  sp:subject :SubjectVar
                ]) ;
      sp:where ([ a       sp:SubQuery ;
                  sp:query
                          [ a       sp:Select ;
                            sp:limit "5"^^xsd:long ;
                            sp:orderBy ([ a       sp:Asc ;
                                        sp:expression :ObjectVar
                                      ]) ;
                            sp:resultVariables (:SubjectVar) ;
                            sp:where ([ a       sp:Union ;
                                        sp:elements (([ sp:object :ObjectVar ;
                                                      sp:predicate :PredicateVar ;
                                                      sp:subject :SubjectVar
                                                    ]) ([ a       sp:NamedGraph ;
                                                      sp:elements ([ sp:object :ObjectVar ;
                                                                  sp:predicate :PredicateVar ;
                                                                  sp:subject :SubjectVar
                                                                ]) ;
                                                      sp:graphNameNode :GraphVar
                                                    ] [ a       sp:Filter ;
                                                      sp:expression
                                                              [ a       sp:or ;
                                                                sp:arg1 [ a       sp:eq ;
                                                                          sp:arg1 :PredicateVar ;
                                                                          sp:arg2 rdfs:label
                                                                        ] ;
                                                                sp:arg2 [ a       sp:eq ;
                                                                          sp:arg1 :PredicateVar ;
                                                                          sp:arg2 dc:title
                                                                        ]
                                                              ]
                                                    ] [ a       sp:Filter ;
                                                      sp:expression
                                                              [ a       sp:regex ;
                                                                sp:arg1 [ a       sp:str ;
                                                                          sp:arg1 :ObjectVar
                                                                        ] ;
                                                                # sp:arg2 "Berners" ;
                                                                sp:arg3 "i"
                                                              ]
                                                    ]))
                                      ])
                          ]
                ] [ a       sp:Optional ;
                  sp:elements ([ a       sp:Union ;
                              sp:elements (([ sp:object :ObjectVar ;
                                            sp:predicate :PredicateVar ;
                                            sp:subject :SubjectVar
                                          ]) ([ a       sp:NamedGraph ;
                                            sp:elements ([ sp:object :ObjectVar ;
                                                        sp:predicate :PredicateVar ;
                                                        sp:subject :SubjectVar
                                                      ]) ;
                                            sp:graphNameNode :GraphVar
                                          ]))
                            ])
                ]) .

# =============================

:TriplesVar  sp:varName "triples"^^xsd:string .

:SelectServices a       sp:Select ;
                            sp:distinct "true"^^xsd:boolean ;
                            #sp:limit "20"^^xsd:long ;
                            sp:orderBy ([ a       sp:Desc ;
                                        sp:expression :TriplesVar
                                      ]) ;
                            sp:resultVariables (:SubjectVar) ;
                            sp:where ([ a       sp:Union ;
                                        sp:elements (([ sp:object :ObjectVar ;
                                                      sp:predicate :PredicateVar ;
                                                      sp:subject :SubjectVar
                                                    ] [ a       sp:Optional ;
                                                      sp:elements ([ sp:object :TriplesVar ;
                                                                  sp:predicate void:triples ;
                                                                  sp:subject :SubjectVar
                                                                ])
                                                    ]) ([ a       sp:NamedGraph ;
                                                      sp:elements ([ sp:object :ObjectVar ;
                                                                  sp:predicate :PredicateVar ;
                                                                  sp:subject :SubjectVar
                                                                ] [ a       sp:Optional ;
                                                                  sp:elements ([ sp:object :TriplesVar ;
                                                                              sp:predicate void:triples ;
                                                                              sp:subject :SubjectVar
                                                                            ])
                                                                ]) ;
                                                      sp:graphNameNode :GraphVar
                                                    ]))
                                      ] [ a       sp:Filter ;
                                        sp:expression
                                                [ a       sp:eq ;
                                                  sp:arg1 :PredicateVar ;
                                                  sp:arg2 sd:endpoint
                                                ]
                                      ]) .

# =============================

:SelectOntologies    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      sp:resultVariables (:SubjectVar) ;
      #sp:limit "20"^^xsd:long ;
      sp:where (:UnionDefaultNamed
		[ a       sp:Filter ;
                  sp:expression
                          [ a       sp:eq ;
                            sp:arg1 :PredicateVar ;
                            sp:arg2 rdf:type
                          ]
                ] [ a       sp:Filter ;
                  sp:expression
			[ a       sp:eq ;
				    sp:arg1 :ObjectVar ;
				    sp:arg2 owl:Ontology
			]
                ]) .

# =============================

:SelectClasses    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      sp:resultVariables (:SubjectVar) ;
      #sp:limit "20"^^xsd:long ;
      sp:where (:UnionDefaultNamed
		[ a       sp:Filter ;
                  sp:expression
                          [ a       sp:eq ;
                            sp:arg1 :PredicateVar ;
                            sp:arg2 rdf:type
                          ]
                ] [ a       sp:Filter ;
                  sp:expression
			[ a       sp:or ;
				    sp:arg1 [ a	    sp:eq ;
						sp:arg1 :ObjectVar ;
						sp:arg2 owl:Class
					    ] ;
				    sp:arg2 [ a	    sp:eq ;
						sp:arg1 :ObjectVar ;
						sp:arg2 rdfs:Class
					    ]
			]
		]) .

# =================

:SelectQueries    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      sp:resultVariables (:SubjectVar) ;
      #sp:limit "20"^^xsd:long ;
      sp:where (:UnionDefaultNamed
		[ a       sp:Filter ;
                  sp:expression
                          [ a       sp:eq ;
                            sp:arg1 :PredicateVar ;
                            sp:arg2 rdf:type
                          ]
                ] [ a       sp:Filter ;
                  sp:expression
			[ a       sp:eq ;
				    sp:arg1 :ObjectVar ;
				    sp:arg2 sp:Query
			]
                ]) .

# =================

:SelectPersons    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      sp:resultVariables (:SubjectVar) ;
      #sp:limit "20"^^xsd:long ;
      sp:where (:UnionDefaultNamed
		[ a       sp:Filter ;
                  sp:expression
                          [ a       sp:eq ;
                            sp:arg1 :PredicateVar ;
                            sp:arg2 rdf:type
                          ]
                ] [ a       sp:Filter ;
                  sp:expression
			[ a       sp:eq ;
				    sp:arg1 :ObjectVar ;
				    sp:arg2 foaf:Person
			]
                ]) .

# =============

:SelectImages    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      sp:resultVariables (:SubjectVar) ;
      #sp:limit "20"^^xsd:long ;
      sp:where (:UnionDefaultNamed
		[ a       sp:Filter ;
                  sp:expression
                          [ a       sp:eq ;
                            sp:arg1 :PredicateVar ;
                            sp:arg2 rdf:type
                          ]
                ] [ a       sp:Filter ;
                  sp:expression
			[ a       sp:eq ;
				    sp:arg1 :ObjectVar ;
				    sp:arg2 foaf:Image
			]
                ]) .

# ================

:CoordVar  sp:varName "coordinate"^^xsd:string .

:SelectLocations    a       sp:Select ;
      sp:distinct "true"^^xsd:boolean ;
      #sp:limit "20"^^xsd:long ;
      sp:resultVariables (:SubjectVar) ;
      sp:where ([ a       sp:Union ;
                  sp:elements (([ sp:object :CoordVar ;
                                sp:predicate :PredicateVar ;
                                sp:subject :SubjectVar
                              ]) ([ a       sp:NamedGraph ;
                                sp:elements ([ sp:object :CoordVar ;
                                            sp:predicate :PredicateVar ;
                                            sp:subject :SubjectVar
                                          ]) ;
                                sp:graphNameNode :GraphVar
                              ]))
                ] [ a       sp:Filter ;
                  sp:expression
                          [ a       sp:or ;
                            sp:arg1 [ a       sp:eq ;
                                      sp:arg1 :PredicateVar ;
                                      sp:arg2 geo:lat
                                    ] ;
                            sp:arg2 [ a       sp:eq ;
                                      sp:arg1 :PredicateVar ;
                                      sp:arg2 geo:long
                                    ]
                          ]
                ]) .
